from django.db import models
from django.db.models.base import ModelBase
from rest_framework import serializers as drf_serializers


class ModelsInfo(object):
    # map of the models created by `AppBaseModelMeta`
    # Model class name -> class object
    registered_models = {}

    # model serializers map which was auto created
    # Model class name -> serializer class
    serializers = {}

    # serializer class which will be used as the base class
    # for all autogenerated serializers
    base_serializer_class = drf_serializers.ModelSerializer

    @classmethod
    def register_serializer(cls, model, serializer):
        cls.serializers[model.__name__] = serializer

    @classmethod
    def register_model(cls, model):
        cls.registered_models[model.__name__] = model

    @classmethod
    def get_serializer(cls, class_name):
        return cls.serializers.get(class_name)

    @classmethod
    def get_model(cls, class_name):
        return cls.registered_models.get(class_name)

    @classmethod
    def get_base_serializer_class(cls):
        return cls.base_serializer_class


class AppBaseModelMeta(ModelBase):
    @classmethod
    def __new__(mcs, *args, **kwargs):
        print(args, kwargs)
        metaclass, name, bases, attrs = args
        meta = attrs.get('Meta', None)
        app_meta = {}
        if meta:
            app_meta = getattr(meta, 'app_meta', None)
            if app_meta:
                delattr(meta, 'app_meta')
                attrs['Meta'] = meta
            else:
                app_meta = {}

        model = super().__new__(mcs, name, bases, attrs)

        # register created django model in ModelsInfo class
        ModelsInfo.register_model(model)

        # get base serializer class for model serializer
        BaseSerializer = ModelsInfo.get_base_serializer_class()

        # get model serializer fields
        fields = app_meta.get('fields') or '__all__'

        # create model serializer
        serializer = type(
            ''.format(),
            (BaseSerializer, ),
            {
                'Meta': type(
                    'Meta', (object, ),
                    {
                        'fields': fields
                    }
                )
            }
        )

        # register created model serializer in ModelsInfo class
        ModelsInfo.register_serializer(model, serializer)

        # add created serializer to model
        model.app_serializer = serializer

        return model


class AppBaseModel(models.Model, metaclass=AppBaseModelMeta):
    class Meta:
        abstract = True


class Author(AppBaseModel):
    name = models.CharField(max_length=100)

    class Meta:
        db_table = 'author'
        app_meta = {
            'fields': ('id', 'name')
        }
